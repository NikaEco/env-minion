#!/usr/bin/env node

const fs = require('fs');

function checkEnv(templatePath, localPath) {
  try {
    const template = fs.readFileSync(templatePath, 'utf-8');
    const local = fs.readFileSync(localPath, 'utf-8');
    const tKeyset = new Set();
    let isConsistent = true;

    for (const tEntry of template.split('\n')) {
      if (tEntry.startsWith('#') || tEntry.trim().length == 0) continue;
      
      const key = tEntry.split('=')[0];
      if (key) {
        tKeyset.add(key);
      }
    }

    for (const entry of local.split('\n')) {
      if (entry.startsWith('#') || entry.trim().length == 0) continue;
      
      const kvPair = entry.split('=');
      const key = kvPair[0];
      if (kvPair.length < 2) {
        console.log(`Value missing for the env variable ${key}`);
        isConsistent = false;
      }

      if (tKeyset.has(key)) {
        tKeyset.delete(key);
      } else {
        console.log(`Env variable ${key} is not defined in template env file @${templatePath}. Please include it in the template if used.`);
        isConsistent = false;
      }
    }

    for (const missingKey of tKeyset) {
      console.log(`Env variable ${missingKey} is missing from env file @${localPath}. Please provide the entry with value.`);
      isConsistent = false;
    }

    return isConsistent;
  } catch (error) {
    throw error;
  }
}

const pattern = /^\.env.*\.example$/;
const tEnvs = [];
const envs = [];

fs.readdirSync(process.cwd()).forEach((entry) => {
  if (fs.statSync(entry).isFile() && pattern.test(entry)) {
    tEnvs.push(entry);
    envs.push(entry.slice(0, -8));
  }
});

let shouldExit = false;
for (let i = 0; i < tEnvs.length; i++) {
  try {
    shouldExit = !checkEnv(tEnvs[i], envs[i]) || shouldExit;
  } catch (error) {
    shouldExit = true;
    console.log(`An error occurred: ${error.message}`);
  }
}

if (shouldExit) {
  console.log('Aborting push');
  process.exit(1);
}
